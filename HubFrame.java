package dijkstraalgorithim;
import java.io.File;
import java.util.ArrayList;
import java.util.Scanner;

/**
 * Class: HubFrame
 * Author: Sai Thupakula
 */
public class HubFrame extends javax.swing.JFrame
{

    /**
     * Initializes the HubFrame window
     */
    public HubFrame() 
    {
        initComponents();
    }

    /**
     * This method initializes the UI components.
     * WARNING: Do NOT modify this code. It's auto-generated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        networkBox = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        hubField = new javax.swing.JTextField();
        startButton = new javax.swing.JButton();
        networkScrollPanel = new javax.swing.JScrollPane();
        hubArea = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Select a Network");

        networkBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "LargeNetwork.dat", "MediumNetwork1.dat", "MediumNetwork2.dat", "SmallNetwork1.dat", "SmallNetwork2.dat" }));
        networkBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                networkBoxActionPerformed(evt);
            }
        });

        jLabel2.setText("Type Start Node: ");

        hubField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startNodeActionPerformed(evt);
            }
        });

        startButton.setText("Select");
        startButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startButtonActionPerformed(evt);
            }
        });

        hubArea.setColumns(20);
        hubArea.setRows(5);
        networkScrollPanel.setViewportView(hubArea);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(networkScrollPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(networkBox, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(hubField, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(startButton)))
                .addContainerGap(22, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(47, 47, 47)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(networkBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(networkScrollPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 190, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(hubField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(startButton))
                .addGap(54, 54, 54))
        );
        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    // Called when a network is selected from the dropdown
    private void networkBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        String fileName = (String) networkBox.getSelectedItem();
        ArrayList<String> hubNames = new ArrayList<>();
        
        // Stop if no file is selected
        if (fileName == null || fileName.isEmpty()) return;

        try {
            Scanner fileScanner = new Scanner(new File(fileName));
            int numHubs = Integer.parseInt(fileScanner.nextLine().trim());

            // Read hub names from the file
            for (int i = 0; i < numHubs && fileScanner.hasNextLine(); i++)
            {
                String line = fileScanner.nextLine().trim();
                if (!line.isEmpty()) 
                {
                    String[] parts = line.split("\\s+");
                    if (parts.length >= 3) 
                    {
                        hubNames.add(parts[0]); // Get the hub name
                    }
                }
            }

            fileScanner.close();

            // Build a string of hub names separated by newlines
            StringBuilder hubList = new StringBuilder();
            for (int i = 0; i < hubNames.size(); i++) 
            {
                hubList.append(hubNames.get(i));
                if (i != hubNames.size() - 1) 
                {
                    hubList.append("\n");
                }
            }
            hubArea.setText(hubList.toString()); // Display the hub list
        } catch (Exception e) 
        {
            hubArea.setText("file read error");
        }
    }//GEN-LAST:event_networkBoxActionPerformed

    // Called when the 'Select' button is pressed
    private void startButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        String fileName = (String) networkBox.getSelectedItem();
        String startHub = hubField.getText().trim();

        // Exit if no network is chosen or input is empty
        if (fileName == null || startHub.isEmpty()) return;

        try {
            // Initialize the hub map from the selected file and start hub
            HubMap map = new HubMap(fileName, startHub);

            ArrayList<String> hubNames = new ArrayList<>();
            Scanner scanner = new Scanner(new File(fileName));
            int numHubs = Integer.parseInt(scanner.nextLine().trim());

            // Gather all hub names except the start hub
            for (int i = 0; i < numHubs && scanner.hasNextLine(); i++)
            {
                String line = scanner.nextLine().trim();
                if (!line.isEmpty()) {
                    String[] parts = line.split("\\s+");
                    if (parts.length >= 3 && !parts[0].equals(startHub)) 
                    {
                        hubNames.add(parts[0]);
                    }
                }
            }
            scanner.close();
            ArrayList<Hub> hubResults = new ArrayList<>();

            // Get the shortest path to each hub from the starting hub
            for (String name : hubNames) {
                ArrayList<Hub> path = map.findPath(name);
                if (path != null && !path.isEmpty()) {
                    hubResults.add(path.get(path.size() - 1)); // Save the end hub
                }
            }

            // Create a readable output of all paths
            StringBuilder output = new StringBuilder();
            for (Hub hub : hubResults) {
                ArrayList<Hub> path = map.findPath(hub.getName());
                if (path != null) {
                    output.append(startHub)
                          .append(" -> ")
                          .append(hub.getName())
                          .append(" : ")
                          .append(path.toString())
                          .append("\n");
                }
            }

            // Open the output window and close the current one
            GetPaths getPaths = new GetPaths(output.toString());
            this.dispose();
            getPaths.setVisible(true);

        } catch (Exception e) {
            hubField.setText("invalid node"); // Show error if the node or file is invalid
        }
    }//GEN-LAST:event_startButtonActionPerformed

    private void startNodeActionPerformed(java.awt.event.ActionEvent evt) 
    {//GEN-FIRST:event_startNodeActionPerformed
        // Placeholder for future code
    }//GEN-LAST:event_hubFieldActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea hubArea;
    private javax.swing.JButton startButton;
    private javax.swing.JComboBox<String> networkBox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane networkScrollPanel;
    private javax.swing.JTextField hubField;
    // End of variables declaration//GEN-END:variables
}